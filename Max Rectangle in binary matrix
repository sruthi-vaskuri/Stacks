class Solution {
    public static int getMaxArea(int arr[],int n) 
    {
        // your code here
        Stack<Integer> st=new Stack<>();
        int max=0;
        for(int i=0;i<arr.length;i++){
            while(!st.isEmpty() && arr[i]<arr[st.peek()]){
                int height=arr[st.peek()];
                st.pop();
                int area=0;
                if(st.isEmpty())
                     area=height*i;
                else
                     area=height*(i-st.peek()-1);
                max=Math.max(area,max);
            }
            st.push(i);
        }
        while(!st.isEmpty()){
              int height=arr[st.peek()];
              st.pop();
              int area=0;
              if(st.isEmpty())
                     area=height*arr.length;
                else
                     area=height*(arr.length-st.peek()-1);
            
                max=Math.max(area,max);
        }
        return max;
    }
    public int maxArea(int M[][], int n, int m) {
        // add code here.
        int maxi=0;
        int arr[]=new int[m];
        for(int i=0;i<n;i++){
             for(int j=0;j<m;j++){
                 if(M[i][j]==0)
                    arr[j]=0;
                else
                   arr[j]+=1;
             }
             maxi=Math.max(maxi,getMaxArea(arr,m));
        }
       return maxi;
    }
}


LINK : https://practice.geeksforgeeks.org/problems/max-rectangle/1/?category[]=Stack&category[]=Queue&category[]=Stack&category[]=Queue&company[]=Amazon&company[]=Amazon&page=1&query=category[]Stackcategory[]Queuecompany[]Amazonpage1company[]Amazoncategory[]Stackcategory[]Queue
